
Documentacion Base de datos
 - Usuarios creados admin_bd



-- Usuario para api
USE MiBaseDeDatos;
GO
CREATE LOGIN api_user WITH PASSWORD = 'ApiPass123!';
CREATE USER api_user FOR LOGIN api_user;

-- Otorgar permisos bÃ¡sicos
GRANT SELECT, INSERT, UPDATE, DELETE ON SCHEMA::dbo TO api_user;
GRANT EXECUTE ON SCHEMA::dbo TO api_user;



Definicion de politicas de permisos
    Permisos Granulares


SEGUNDA BASE DE DATOS

	errorWs id, descripcion
	estadosWs id, descripcion
	low webservices


DISPARADOR SINCRONIZAR USUARIOS

	
CREATE TRIGGER trg_CrearUsuario
ON Empleados
AFTER INSERT
AS
BEGIN
    INSERT INTO Usuarios (EmpleadoID, Username, PasswordHash, RolID)
    SELECT 
        EmpleadoID, 
        LOWER(LEFT(Nombre, 1) + Apellido),  -- Genera un username inicial
        HASHBYTES('SHA2_256', 'password123'),  -- ContraseÃ±a por defecto
        2  -- Rol por defecto (Ej: 2 = Empleado)
    FROM inserted;
END;



PROCEDIMIENTOS - DIAPARADORES
- una vez creada la base... listar todas las tablas de la base para dar permisos
- Crear un empleado (salario 2 tablas, relaciones position cargo)
- Actualizar un saladio
- Actualizar un cargo
- Revisar que un empleado tenga un solo salario activo
- Revisar que un empleado tenga un solo cargo activo
- El ultimo salario debe ser igual al de la tabla empleados
- validar que una contraseÃ±a cumpla con lo minimo
- Liquidar una nomina
- pagar la nomina
- sacar aprovicionamiento de la nomina
- total nomina mes
- total aprovicionamiento
- total liquidacion,
- Crea un nuevo contrato - acender, liquidar, despedit un empleado
- si liuidacion pagana o cancelada no deja modificar
- al modificar nominas acttualizar resumen y aprovicionamiento
- crear recibo de nomina
- reportes de login
- reporte de nomina
- reportes de usaurios




Auditoria Nativa de SQL Server




LOGICA DE PERMISOS

ðŸ”² Crear procedimientos almacenados para gestionar los permisos.
ðŸ”² Crear vistas con filtros dinÃ¡micos para restringir acceso a datos segÃºn usuario/rol.
ðŸ”² Utilizar funciones SQL y triggers para control de permisos.
ðŸ”² Implementar DCL (GRANT, REVOKE, DENY) para control de acceso.
ðŸ”² Configurar registro de auditorÃ­a (log_accesos).



API

ðŸ”² Configurar Django y conectar con SQL Server.
ðŸ”² Crear modelos en Django (ORM).
ðŸ”² Implementar ViewSets y Serializers para exponer la API.
ðŸ”² Implementar middleware de seguridad para verificar permisos antes de responder.
ðŸ”² Pruebas con Postman para verificar acceso a datos segÃºn permisos.

REPORTE

ðŸ”² Implementar consultas SQL para reportes de nÃ³mina.
ðŸ”² Crear endpoints en Django para exportar datos en CSV y PDF


DOCUMENTACION

ðŸ”² DocumentaciÃ³n del cÃ³digo (docstrings y comentarios).

			def obtener_permisos(usuario_id: int):
			"""
			ðŸ”¹ Obtiene la lista de permisos para un usuario especÃ­fico.

			ðŸ“Œ ParÃ¡metros:
				usuario_id (int): ID del usuario en la base de datos.

			ðŸ“Œ Retorno:
				List[dict]: Lista de permisos con estructura {'tabla': str, 'permiso': bool}
			"""
			permisos = Permiso.objects.filter(usuario_id=usuario_id).values('tabla', 'permiso_lectura')
			return list(permisos)


ðŸ”² Manual tÃ©cnico (estructura BD, procedimientos, API endpoints).

	ðŸ”² Modelo ER
	ðŸ”² DescripciÃ³n de las tablas y relaciones
	ðŸ”² DefiniciÃ³n de cada campo (nombre, tipo de dato, restricciones, etc.)
	ðŸ”² Ejemplos de datos de prueba (INSERT con valores)
	ðŸ”² PolÃ­ticas de seguridad y control de acceso
	
			
			
			
			## ðŸ“Œ **3. DocumentaciÃ³n de la ImplementaciÃ³n de la LÃ³gica de Permisos y API**  
			Es fundamental documentar cÃ³mo funciona la lÃ³gica de permisos dentro de SQL Server y Django API.  

			### ðŸ”¹ **DocumentaciÃ³n de Procedimientos Almacenados y Vistas**  
			ðŸ”² **Explicar el propÃ³sito de cada SP (Stored Procedure) y funciÃ³n.**  
			ðŸ”² **Indicar parÃ¡metros de entrada y salida.**  
			ðŸ”² **Ejemplo de uso con casos de prueba.**  

			ðŸ“Œ **Ejemplo de documentaciÃ³n para SQL Server:**  
			```sql
			-- ðŸ”¹ Procedimiento para consultar registros segÃºn permisos del usuario
			-- ðŸ“Œ Autor: [Tu Nombre]
			-- ðŸ“Œ Fecha: [dd/mm/yyyy]
			-- ðŸ“Œ DescripciÃ³n: Retorna los datos permitidos segÃºn el usuario.
			-- ðŸ“Œ ParÃ¡metros:
			--   @usuario_id INT -> ID del usuario que consulta.
			-- ðŸ“Œ Retorno:
			--   Tabla con los datos filtrados por permisos.

			CREATE PROCEDURE sp_obtener_registros_permitidos
				@usuario_id INT
			AS
			BEGIN
				SELECT r.*
				FROM registros r
				INNER JOIN permisos_registros p ON r.id = p.registro_id
				WHERE p.usuario_id = @usuario_id AND p.permiso_lectura = 1;
			END;
	
	
	
			-- ðŸ”¹ FunciÃ³n que devuelve si un usuario tiene acceso a una tabla especÃ­fica
			-- ðŸ“Œ ParÃ¡metros:
			--    @usuario_id INT -> ID del usuario.
			--    @tabla VARCHAR(50) -> Nombre de la tabla a validar.
			-- ðŸ“Œ Retorno:
			--    BIT (1 = tiene acceso, 0 = no tiene acceso).

			CREATE FUNCTION fn_tiene_acceso(@usuario_id INT, @tabla VARCHAR(50))
			RETURNS BIT
			AS
			BEGIN
				DECLARE @permiso BIT;
				SELECT @permiso = permiso_lectura
				FROM permisos_tablas
				WHERE usuario_id = @usuario_id AND tabla = @tabla;

				RETURN ISNULL(@permiso, 0);
			END;
			
			
			CREATE VIEW Vista_Empleados AS
			SELECT e.*
			FROM Empleados e
			JOIN PermisosRegistros pr ON pr.registro_id = e.id
			WHERE pr.usuario_id = SUSER_ID();


	ðŸ”² Nombre del endpoint y propÃ³sito.
	ðŸ”² MÃ©todo HTTP (GET, POST, PUT, DELETE).
	ðŸ”² Ejemplo de request y response JSON.
	
			# ðŸ”¹ Endpoint: Obtener empleados segÃºn permisos
			# ðŸ“Œ MÃ©todo: GET
			# ðŸ“Œ URL: /api/empleados/
			# ðŸ“Œ DescripciÃ³n: Devuelve la lista de empleados permitidos segÃºn el usuario autenticado.

			# ðŸ“Œ Ejemplo de respuesta:
			{
				"id": 1,
				"nombre": "Juan PÃ©rez",
				"salario": 5000000,
				"departamento": "IT"
			}
		
	
ðŸ”² Manual de usuario (cÃ³mo usar el sistema de permisos).

Swagger / Postman â†’ Para generar documentaciÃ³n interactiva.
Markdown + GitHub Wiki â†’ Para documentaciÃ³n estÃ¡tica.

ðŸ“Œ Accede a la documentaciÃ³n en tu navegador:
Swagger UI â†’ http://127.0.0.1:8000/docs
Redoc â†’ http://127.0.0.1:8000/redoc

